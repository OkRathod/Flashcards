[
  {
    "id": 1,
    "question": "What is Oracle SQL?",
    "answer": "Oracle SQL is a dialect of the SQL language used specifically for interacting with Oracle databases.",
    "syntax": "",
    "difficulty": "entry-level",
    "tags": ["oracle", "sql", "basics"],
    "category": "basics"
  },
  {
    "id": 2,
    "question": "What is a primary key and why is it important?",
    "answer": "A primary key uniquely identifies each record in a table. It ensures data integrity by preventing duplicate and null values in the key column.",
    "syntax": "CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, name VARCHAR2(100));",
    "difficulty": "entry-level",
    "tags": ["keys", "database", "integrity"],
    "category": "basics"
  },
  {
    "id": 3,
    "question": "How do you retrieve the top N rows in Oracle SQL?",
    "answer": "You can use ROWNUM to limit the number of rows returned by a query.",
    "syntax": "SELECT * FROM employees WHERE ROWNUM <= 5;",
    "difficulty": "entry-level",
    "tags": ["query", "limit", "rownumber"],
    "category": "sql-queries"
  },
  {
    "id": 4,
    "question": "What is the difference between WHERE and HAVING clauses?",
    "answer": "WHERE filters rows before grouping is applied, HAVING filters groups after aggregation.",
    "syntax": "SELECT department_id, COUNT(*) FROM employees GROUP BY department_id HAVING COUNT(*) > 5;",
    "difficulty": "entry-level",
    "tags": ["sql", "clauses", "filtering"],
    "category": "sql-queries"
  },
  {
    "id": 5,
    "question": "What is normalization in database design?",
    "answer": "Normalization is the process of organizing data to reduce redundancy and improve data integrity by dividing tables and establishing relationships.",
    "syntax": "",
    "difficulty": "entry-level",
    "tags": ["database design", "normalization"],
    "category": "database-design"
  },
  {
    "id": 6,
    "question": "How can you handle NULL values in Oracle SQL?",
    "answer": "Use IS NULL or IS NOT NULL for filtering. Use COALESCE to provide default values if NULL.",
    "syntax": "SELECT COALESCE(column_name, 'default') FROM table_name;",
    "difficulty": "entry-level",
    "tags": ["sql", "null", "functions"],
    "category": "sql-queries"
  },
  {
    "id": 7,
    "question": "What are indexes and why are they important?",
    "answer": "Indexes improve query performance by reducing full table scans and speeding up data retrieval.",
    "syntax": "CREATE INDEX idx_name ON table_name(column_name);",
    "difficulty": "entry-level",
    "tags": ["performance", "index", "optimization"],
    "category": "performance"
  },
  {
    "id": 8,
    "question": "Explain the use of the MERGE statement in Oracle SQL.",
    "answer": "MERGE allows combining insert, update, and delete actions in one statement for upsert operations.",
    "syntax": "MERGE INTO target_table t USING source_table s ON (t.id = s.id) WHEN MATCHED THEN UPDATE SET t.col = s.col WHEN NOT MATCHED THEN INSERT (t.id, t.col) VALUES (s.id, s.col);",
    "difficulty": "intermediate",
    "tags": ["merge", "upsert", "dml"],
    "category": "sql-queries"
  },
  {
    "id": 9,
    "question": "What is a foreign key?",
    "answer": "A foreign key enforces referential integrity between tables by linking a column to the primary key of another table.",
    "syntax": "ALTER TABLE child_table ADD CONSTRAINT fk_name FOREIGN KEY (column_name) REFERENCES parent_table (primary_key_column);",
    "difficulty": "entry-level",
    "tags": ["keys", "referential integrity"],
    "category": "database-design"
  },
  {
    "id": 10,
    "question": "What is a view and what are its benefits?",
    "answer": "A view is a virtual table based on a SQL query result. It simplifies complex queries, provides security by restricting access, and offers abstraction.",
    "syntax": "CREATE VIEW high_salary_employees AS SELECT * FROM employees WHERE salary > 50000;",
    "difficulty": "entry-level",
    "tags": ["views", "abstraction", "security"],
    "category": "basics"
  },
  {
    "id": 11,
    "question": "Describe the difference between JOIN and UNION.",
    "answer": "JOIN merges columns from related tables based on matching column values, while UNION appends rows from multiple SELECT queries with compatible columns.",
    "syntax": "SELECT * FROM employees JOIN departments ON employees.dept_id = departments.id;",
    "difficulty": "entry-level",
    "tags": ["joins", "union", "queries"],
    "category": "sql-queries"
  },
  {
    "id": 12,
    "question": "How do you find duplicate records in a table?",
    "answer": "By grouping rows on columns of interest and using HAVING COUNT(*) > 1, you can identify duplicates.",
    "syntax": "SELECT column1, COUNT(*) FROM table_name GROUP BY column1 HAVING COUNT(*) > 1;",
    "difficulty": "entry-level",
    "tags": ["duplicates", "grouping"],
    "category": "sql-queries"
  },
  {
    "id": 13,
    "question": "What is a sequence in Oracle SQL?",
    "answer": "A sequence is a database object that generates a numeric sequence, often used to create unique identifiers for rows.",
    "syntax": "CREATE SEQUENCE emp_seq START WITH 1 INCREMENT BY 1;",
    "difficulty": "entry-level",
    "tags": ["sequence", "unique identifiers"],
    "category": "basics"
  },
  {
    "id": 14,
    "question": "Write a query to fetch employees whose salary is above the department's average.",
    "answer": "Use a correlated subquery to compare each employee's salary with their department's average salary.",
    "syntax": "SELECT * FROM employees e WHERE e.salary > (SELECT AVG(salary) FROM employees WHERE dept_id = e.dept_id);",
    "difficulty": "intermediate",
    "tags": ["subquery", "aggregation"],
    "category": "sql-queries"
  },
  {
    "id": 15,
    "question": "How would you calculate a running total in Oracle SQL?",
    "answer": "Use the SUM analytic function with the OVER clause to calculate running totals.",
    "syntax": "SELECT value, SUM(value) OVER (ORDER BY date_column) AS running_total FROM table_name;",
    "difficulty": "intermediate",
    "tags": ["analytical functions", "window functions"],
    "category": "sql-queries"
  },
  {
    "id": 16,
    "question": "What is a self-join and when is it used?",
    "answer": "A self-join joins a table to itself. It's useful for hierarchical structures like employee-manager relationships.",
    "syntax": "SELECT a.name, b.name AS manager FROM employees a JOIN employees b ON a.manager_id = b.employee_id;",
    "difficulty": "entry-level",
    "tags": ["joins", "hierarchy"],
    "category": "sql-queries"
  },
  {
    "id": 17,
    "question": "How do you find the second highest salary in Oracle SQL?",
    "answer": "Use the ROW_NUMBER or DENSE_RANK function to order salaries and select the second one.",
    "syntax": "SELECT salary FROM (SELECT salary, DENSE_RANK() OVER (ORDER BY salary DESC) rnk FROM employees) WHERE rnk = 2;",
    "difficulty": "intermediate",
    "tags": ["ranking", "window functions"],
    "category": "sql-queries"
  },
  {
    "id": 18,
    "question": "What is the difference between DELETE and TRUNCATE commands?",
    "answer": "DELETE removes rows based on a condition and can be rolled back; TRUNCATE removes all rows quickly, cannot be rolled back, and doesn't trigger row-level triggers.",
    "syntax": "DELETE FROM table_name WHERE condition;\nTRUNCATE TABLE table_name;",
    "difficulty": "entry-level",
    "tags": ["dml", "ddl"],
    "category": "basics"
  },
  {
    "id": 19,
    "question": "What is a trigger in Oracle SQL?",
    "answer": "A trigger is a procedural code executed automatically in response to certain table events like INSERT, UPDATE, or DELETE.",
    "syntax": "CREATE OR REPLACE TRIGGER t_name BEFORE INSERT ON t_table FOR EACH ROW BEGIN ... END;",
    "difficulty": "intermediate",
    "tags": ["triggers", "automation"],
    "category": "advanced-concepts"
  },
  {
    "id": 20,
    "question": "How can you pivot data in Oracle SQL?",
    "answer": "Use the PIVOT operator or conditional aggregation with CASE statements to convert rows to columns.",
    "syntax": "SELECT * FROM (SELECT department, salary FROM employees) PIVOT (SUM(salary) FOR department IN ('HR', 'IT', 'SALES'));",
    "difficulty": "intermediate",
    "tags": ["pivot", "analysis"],
    "category": "advanced-concepts"
  },
  {
    "id": 21,
    "question": "What does the GROUP BY clause do in SQL?",
    "answer": "GROUP BY aggregates data across specified columns, allowing the use of aggregate functions like COUNT, SUM, AVG, etc.",
    "syntax": "SELECT department_id, COUNT(*) FROM employees GROUP BY department_id;",
    "difficulty": "entry-level",
    "tags": ["aggregation", "grouping"],
    "category": "basics"
  },
  {
    "id": 22,
    "question": "What are constraints in Oracle SQL?",
    "answer": "Constraints enforce rules at the column or table level. Examples include NOT NULL, UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK, and DEFAULT.",
    "syntax": "ALTER TABLE employees ADD CONSTRAINT emp_email_unique UNIQUE (email);",
    "difficulty": "entry-level",
    "tags": ["constraints", "data integrity"],
    "category": "database-design"
  },
  {
    "id": 23,
    "question": "What is the purpose of the EXPLAIN PLAN command?",
    "answer": "EXPLAIN PLAN shows the execution plan chosen by the Oracle optimizer for a query, helping with query optimization.",
    "syntax": "EXPLAIN PLAN FOR SELECT * FROM employees;",
    "difficulty": "intermediate",
    "tags": ["optimization", "performance"],
    "category": "performance"
  },
  {
    "id": 24,
    "question": "What are materialized views?",
    "answer": "Materialized views store the results of a query physically and periodically refresh the data, improving performance for complex queries.",
    "syntax": "CREATE MATERIALIZED VIEW mv_name AS SELECT * FROM employees;",
    "difficulty": "intermediate",
    "tags": ["views", "performance"],
    "category": "advanced-concepts"
  },
  {
    "id": 25,
    "question": "How do you use the NVL function in Oracle SQL?",
    "answer": "NVL is used to replace NULL values with a specified value.",
    "syntax": "SELECT NVL(phone, 'N/A') FROM contacts;",
    "difficulty": "entry-level",
    "tags": ["functions", "null"],
    "category": "sql-queries"
  },
  {
    "id": 26,
    "question": "What is a synonym in Oracle SQL?",
    "answer": "A synonym is an alias for another database object, simplifying SQL access, especially for long object names or cross-schema access.",
    "syntax": "CREATE SYNONYM emp FOR hr.employees;",
    "difficulty": "entry-level",
    "tags": ["alias", "schema"],
    "category": "basics"
  },
  {
    "id": 27,
    "question": "How do you update data in a table?",
    "answer": "Use the UPDATE statement with a SET clause and optional WHERE condition.",
    "syntax": "UPDATE employees SET salary = salary * 1.1 WHERE dept_id = 10;",
    "difficulty": "entry-level",
    "tags": ["update", "dml"],
    "category": "sql-queries"
  },
  {
    "id": 28,
    "question": "What is an index scan?",
    "answer": "An index scan is an access method where the database engine uses an index to retrieve the relevant rows, instead of scanning the full table.",
    "syntax": "",
    "difficulty": "intermediate",
    "tags": ["index", "performance"],
    "category": "performance"
  },
  {
    "id": 29,
    "question": "How do you add a new column to an existing table?",
    "answer": "Use the ALTER TABLE statement with the ADD clause.",
    "syntax": "ALTER TABLE employees ADD date_of_birth DATE;",
    "difficulty": "entry-level",
    "tags": ["alter", "table"],
    "category": "sql-queries"
  },
  {
    "id": 30,
    "question": "Explain the use of analytic (window) functions.",
    "answer": "Analytic functions compute aggregate values over a specified range of rows, providing capabilities like ranking, running totals, and moving averages.",
    "syntax": "SELECT salary, RANK() OVER (ORDER BY salary DESC) FROM employees;",
    "difficulty": "intermediate",
    "tags": ["analytic", "window functions"],
    "category": "advanced-concepts"
  },
  {
    "id": 31,
    "question": "What is a clustered index?",
    "answer": "In Oracle, indexes are non-clustered by default, but a clustered index sorts and stores data rows in the table according to the index key.",
    "syntax": "",
    "difficulty": "intermediate",
    "tags": ["index", "clustering"],
    "category": "database-design"
  },
  {
    "id": 32,
    "question": "How can you prevent SQL injection attacks in Oracle?",
    "answer": "Use bind variables, parameterized queries, and avoid dynamic SQL that concatenates user input.",
    "syntax": "EXECUTE IMMEDIATE 'SELECT * FROM employees WHERE id = :id' USING v_id;",
    "difficulty": "intermediate",
    "tags": ["security", "injection"],
    "category": "performance"
  },
  {
    "id": 33,
    "question": "Write a query to display employee names whose salary is greater than the average.",
    "answer": "Use a subquery to compute the average salary and compare each employee's salary.",
    "syntax": "SELECT name FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);",
    "difficulty": "entry-level",
    "tags": ["aggregation", "subquery"],
    "category": "sql-queries"
  },
  {
    "id": 34,
    "question": "How do you perform a backup in Oracle Database?",
    "answer": "Backups can be performed using Oracle Data Pump, RMAN, or manual export using the EXPORT utility.",
    "syntax": "EXPDP username/password DIRECTORY=backup_dir DUMPFILE=db_backup.dmp FULL=Y;",
    "difficulty": "intermediate",
    "tags": ["backup", "maintenance"],
    "category": "database-design"
  },
  {
    "id": 35,
    "question": "What is a deadlock in Oracle SQL?",
    "answer": "A deadlock occurs when two or more sessions block one another by holding locks on resources each session needs.",
    "syntax": "",
    "difficulty": "intermediate",
    "tags": ["deadlock", "concurrency"],
    "category": "advanced-concepts"
  },
  {
    "id": 36,
    "question": "What is a function and how is it different from a procedure?",
    "answer": "A function returns a value and can be used in SQL statements; a procedure does not necessarily return a value and is run as a standalone routine.",
    "syntax": "CREATE FUNCTION add_numbers(a NUMBER, b NUMBER) RETURN NUMBER IS BEGIN RETURN a + b; END;",
    "difficulty": "intermediate",
    "tags": ["plsql", "functions"],
    "category": "plsql"
  },
  {
    "id": 37,
    "question": "Explain the usage of the CASE statement.",
    "answer": "CASE allows conditional logic in SQL. It returns values based on conditions.",
    "syntax": "SELECT name, CASE WHEN salary > 50000 THEN 'High' ELSE 'Low' END AS salary_grade FROM employees;",
    "difficulty": "entry-level",
    "tags": ["case", "conditional"],
    "category": "sql-queries"
  },
  {
    "id": 38,
    "question": "How do you remove duplicate rows from a table?",
    "answer": "Use ROW_NUMBER or RANK inside a subquery to identify duplicates and delete rows with row number > 1.",
    "syntax": "DELETE FROM employees WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM employees GROUP BY name, department);",
    "difficulty": "intermediate",
    "tags": ["duplicates", "cleaning"],
    "category": "sql-queries"
  },
  {
    "id": 39,
    "question": "What is a correlated subquery?",
    "answer": "A correlated subquery refers to columns from the outer query and is re-evaluated for each row processed by the outer query.",
    "syntax": "SELECT name FROM employees e WHERE salary > (SELECT AVG(salary) FROM employees WHERE dept_id = e.dept_id);",
    "difficulty": "intermediate",
    "tags": ["subquery", "correlated"],
    "category": "advanced-concepts"
  },
  {
    "id": 40,
    "question": "How do you handle transactions in Oracle SQL?",
    "answer": "Use COMMIT to make changes permanent, ROLLBACK to undo uncommitted changes, and SAVEPOINT for partial rollbacks.",
    "syntax": "BEGIN; UPDATE employees SET salary = salary + 1000 WHERE dept_id = 20; COMMIT;",
    "difficulty": "entry-level",
    "tags": ["transactions", "commit", "rollback"],
    "category": "sql-queries"
  },
  {
    "id": 41,
    "question": "What is the difference between CHAR and VARCHAR2 in Oracle?",
    "answer": "CHAR is fixed-length; VARCHAR2 is variable-length. CHAR pads unused space with blanks.",
    "syntax": "CREATE TABLE t (a CHAR(10), b VARCHAR2(10));",
    "difficulty": "entry-level",
    "tags": ["datatypes", "character"],
    "category": "basics"
  },
  {
    "id": 42,
    "question": "How do you delete data from a table?",
    "answer": "Use the DELETE statement with an optional WHERE clause to specify which rows to remove.",
    "syntax": "DELETE FROM employees WHERE salary < 20000;",
    "difficulty": "entry-level",
    "tags": ["delete", "dml"],
    "category": "sql-queries"
  },
  {
    "id": 43,
    "question": "How do you enable or disable a constraint?",
    "answer": "Use the ALTER TABLE statement with ENABLE or DISABLE CONSTRAINT.",
    "syntax": "ALTER TABLE employees DISABLE CONSTRAINT emp_email_unique;",
    "difficulty": "intermediate",
    "tags": ["constraints", "alter"],
    "category": "sql-queries"
  },
  {
    "id": 44,
    "question": "Describe the use of the DISTINCT keyword.",
    "answer": "DISTINCT removes duplicate rows from the query result set.",
    "syntax": "SELECT DISTINCT department_id FROM employees;",
    "difficulty": "entry-level",
    "tags": ["distinct", "duplicates"],
    "category": "sql-queries"
  },
  {
    "id": 45,
    "question": "What is an OUTER JOIN?",
    "answer": "OUTER JOIN returns all rows from one table and the matched rows from another. Unmatched rows are filled with NULLs.",
    "syntax": "SELECT * FROM a LEFT OUTER JOIN b ON a.id = b.a_id;",
    "difficulty": "entry-level",
    "tags": ["joins", "outer join"],
    "category": "sql-queries"
  },
  {
    "id": 46,
    "question": "What is a package in Oracle PL/SQL?",
    "answer": "A package is a collection of related PL/SQL procedures, functions, variables, and cursors grouped together as a single unit.",
    "syntax": "CREATE PACKAGE emp_pkg AS PROCEDURE raise_salary(emp_id NUMBER); END emp_pkg;",
    "difficulty": "intermediate",
    "tags": ["plsql", "package"],
    "category": "plsql"
  },
  {
    "id": 47,
    "question": "How do you find the employees who do not have a manager?",
    "answer": "Search for employees where the manager_id is NULL or does not exist in the manager's list.",
    "syntax": "SELECT * FROM employees WHERE manager_id IS NULL;",
    "difficulty": "entry-level",
    "tags": ["query", "null"],
    "category": "sql-queries"
  },
  {
    "id": 48,
    "question": "What are the differences between an implicit and explicit cursor?",
    "answer": "Implicit cursors are automatically created by Oracle for single SELECT statements. Explicit cursors are declared and controlled by the programmer, allowing for more complex row handling.",
    "syntax": "DECLARE emp_cur CURSOR FOR SELECT * FROM employees;",
    "difficulty": "intermediate",
    "tags": ["cursor", "plsql"],
    "category": "plsql"
  },
  {
    "id": 49,
    "question": "Explain the concept of ROWNUM in Oracle SQL.",
    "answer": "ROWNUM is a pseudo-column that returns a unique number for each row in the result set. Used to limit results or assign row numbers.",
    "syntax": "SELECT * FROM employees WHERE ROWNUM <= 10;",
    "difficulty": "entry-level",
    "tags": ["rownumber", "pseudo-column"],
    "category": "sql-queries"
  },
  {
    "id": 50,
    "question": "How do you join more than two tables in Oracle SQL?",
    "answer": "You chain multiple JOIN clauses together, specifying join conditions between respective tables.",
    "syntax": "SELECT * FROM a JOIN b ON a.id = b.a_id JOIN c ON b.id = c.b_id;",
    "difficulty": "entry-level",
    "tags": ["joins", "multiple tables"],
    "category": "sql-queries"
  },

{
    "id": 51,
    "question": "How do you enforce a UNIQUE constraint in Oracle SQL?",
    "answer": "A UNIQUE constraint ensures all values in a column or set of columns are distinct across the table, preventing duplicate entries.",
    "syntax": "ALTER TABLE employees ADD CONSTRAINT unique_email UNIQUE (email);",
    "difficulty": "entry-level",
    "tags": ["constraints", "unique"],
    "category": "database-design"
  },
  {
    "id": 52,
    "question": "How do you create a composite primary key?",
    "answer": "A composite primary key consists of more than one column. You define it at the table level.",
    "syntax": "CREATE TABLE project_assignment (\n  emp_id NUMBER,\n  project_id NUMBER,\n  PRIMARY KEY (emp_id, project_id)\n);",
    "difficulty": "entry-level",
    "tags": ["primary key", "composite", "constraints"],
    "category": "database-design"
  },
  {
    "id": 53,
    "question": "What is the use of the DEFAULT constraint?",
    "answer": "The DEFAULT constraint sets a default value for a column if no value is provided during insertion.",
    "syntax": "ALTER TABLE employees ADD hire_date DATE DEFAULT SYSDATE;",
    "difficulty": "entry-level",
    "tags": ["constraints", "default"],
    "category": "database-design"
  },
  {
    "id": 54,
    "question": "How do you display the current date and time in Oracle SQL?",
    "answer": "Use the SYSDATE function to retrieve the current date and time from the database server.",
    "syntax": "SELECT SYSDATE FROM dual;",
    "difficulty": "entry-level",
    "tags": ["date", "sysdate", "functions"],
    "category": "sql-queries"
  },
  {
    "id": 55,
    "question": "What is a cursor and what are its types in PL/SQL?",
    "answer": "A cursor is a pointer to the context area in memory for processing individual rows. Types: implicit (handled by Oracle) and explicit (user-defined for complex processes).",
    "syntax": "DECLARE CURSOR emp_cur IS SELECT * FROM employees; BEGIN OPEN emp_cur; ... END;",
    "difficulty": "intermediate",
    "tags": ["plsql", "cursor"],
    "category": "plsql"
  },
  {
    "id": 56,
    "question": "How do you perform an INNER JOIN in Oracle SQL?",
    "answer": "An INNER JOIN returns rows that have matching values in both tables based on the join condition.",
    "syntax": "SELECT e.name, d.department_name FROM employees e INNER JOIN departments d ON e.department_id = d.department_id;",
    "difficulty": "entry-level",
    "tags": ["joins", "inner join"],
    "category": "sql-queries"
  },
  {
    "id": 57,
    "question": "What is the use of the TO_CHAR function?",
    "answer": "TO_CHAR converts a number or date to a character string, allowing formatting of output.",
    "syntax": "SELECT TO_CHAR(salary, '999,999') FROM employees;",
    "difficulty": "entry-level",
    "tags": ["conversion", "functions", "to_char"],
    "category": "sql-queries"
  },
  {
    "id": 58,
    "question": "Explain the difference between UNION and UNION ALL.",
    "answer": "UNION removes duplicates from the combined result, whereas UNION ALL includes all rows, even duplicates.",
    "syntax": "SELECT id FROM a UNION SELECT id FROM b;\nSELECT id FROM a UNION ALL SELECT id FROM b;",
    "difficulty": "entry-level",
    "tags": ["set operation", "union"],
    "category": "sql-queries"
  },
  {
    "id": 59,
    "question": "What are aggregate functions in SQL?",
    "answer": "Aggregate functions calculate a single result from multiple input rows, such as SUM, COUNT, AVG, MAX, and MIN.",
    "syntax": "SELECT AVG(salary), MAX(salary) FROM employees;",
    "difficulty": "entry-level",
    "tags": ["aggregation", "functions"],
    "category": "sql-queries"
  },
  {
    "id": 60,
    "question": "Describe the use of the LIKE operator.",
    "answer": "LIKE enables pattern matching using '%' (any sequence) and '_' (single character). Commonly used for searching text.",
    "syntax": "SELECT * FROM employees WHERE name LIKE 'A%';",
    "difficulty": "entry-level",
    "tags": ["like", "pattern matching"],
    "category": "sql-queries"
  },
  {
    "id": 61,
    "question": "How do you handle exceptions in PL/SQL?",
    "answer": "PL/SQL exceptions are dealt with using the EXCEPTION block, handling both predefined and user-defined exceptions.",
    "syntax": "BEGIN\n  -- code\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    DBMS_OUTPUT.PUT_LINE('No data');\nEND;",
    "difficulty": "intermediate",
    "tags": ["plsql", "exception"],
    "category": "plsql"
  },
  {
    "id": 62,
    "question": "What is the purpose of the EXISTS operator?",
    "answer": "EXISTS checks for the existence of rows returned by a subquery and returns TRUE if any rows exist.",
    "syntax": "SELECT name FROM employees e WHERE EXISTS (SELECT 1 FROM departments d WHERE d.manager_id = e.employee_id);",
    "difficulty": "intermediate",
    "tags": ["exists", "subquery"],
    "category": "sql-queries"
  },
  {
    "id": 63,
    "question": "What is the difference between IN and ANY operators?",
    "answer": "IN checks if a value matches any value in a list or subquery; ANY is combined with comparison operators to compare a value to any in a list/subquery.",
    "syntax": "SELECT * FROM employees WHERE salary IN (30000, 40000);\nSELECT * FROM employees WHERE salary > ANY (SELECT salary FROM employees WHERE department_id = 10);",
    "difficulty": "intermediate",
    "tags": ["in", "any", "comparison"],
    "category": "sql-queries"
  },
  {
    "id": 64,
    "question": "How do you create an auto-increment column in Oracle SQL?",
    "answer": "Use a sequence and assign it as default using triggers or by setting default value in modern versions.",
    "syntax": "CREATE SEQUENCE emp_seq START WITH 1;\nCREATE TABLE employees (id NUMBER DEFAULT emp_seq.NEXTVAL, name VARCHAR2(100));",
    "difficulty": "intermediate",
    "tags": ["sequence", "auto-increment"],
    "category": "database-design"
  },
  {
    "id": 65,
    "question": "How do you select a random row from a table?",
    "answer": "ORDER BY DBMS_RANDOM.VALUE orders rows randomly; you can then use FETCH or WHERE ROWNUM = 1.",
    "syntax": "SELECT * FROM employees ORDER BY DBMS_RANDOM.VALUE FETCH FIRST 1 ROW ONLY;",
    "difficulty": "intermediate",
    "tags": ["random", "selection"],
    "category": "sql-queries"
  },
  {
    "id": 66,
    "question": "How do you drop a column from a table?",
    "answer": "Use the ALTER TABLE statement with DROP COLUMN to remove a column.",
    "syntax": "ALTER TABLE employees DROP COLUMN phone_number;",
    "difficulty": "entry-level",
    "tags": ["alter", "drop column"],
    "category": "sql-queries"
  },
  {
    "id": 67,
    "question": "How do you copy data from one table to another?",
    "answer": "Use INSERT INTO ... SELECT to copy rows from one table to another, which can be filtered as necessary.",
    "syntax": "INSERT INTO employees_backup SELECT * FROM employees;",
    "difficulty": "entry-level",
    "tags": ["insert", "copy"],
    "category": "sql-queries"
  },
  {
    "id": 68,
    "question": "How can you rename a table?",
    "answer": "Use the RENAME statement or ALTER TABLE RENAME TO.",
    "syntax": "RENAME old_table TO new_table;",
    "difficulty": "entry-level",
    "tags": ["rename", "alter"],
    "category": "sql-queries"
  },
  {
    "id": 69,
    "question": "What is the difference between CHAR, VARCHAR, and VARCHAR2?",
    "answer": "CHAR is fixed-length; VARCHAR and VARCHAR2 are variable-length, but VARCHAR2 is the recommended type in Oracle to avoid future compatibility issues.",
    "syntax": "CREATE TABLE t (a CHAR(10), b VARCHAR2(20));",
    "difficulty": "entry-level",
    "tags": ["datatypes", "character"],
    "category": "basics"
  },
  {
    "id": 70,
    "question": "How do you list all tables in the current user's schema?",
    "answer": "Query the USER_TABLES or ALL_TABLES view to list tables owned by a user.",
    "syntax": "SELECT table_name FROM user_tables;",
    "difficulty": "entry-level",
    "tags": ["metadata", "system tables"],
    "category": "sql-queries"
  },
  {
    "id": 71,
    "question": "Write a query to display the department with the highest number of employees.",
    "answer": "Group by department and use ORDER BY with FETCH FIRST 1 ROW to get the top department.",
    "syntax": "SELECT department_id, COUNT(*) as emp_count FROM employees GROUP BY department_id ORDER BY emp_count DESC FETCH FIRST 1 ROW ONLY;",
    "difficulty": "placement",
    "tags": ["grouping", "aggregation", "ranking"],
    "category": "interview"
  },
  {
    "id": 72,
    "question": "How would you fetch the Nth highest salary from a table?",
    "answer": "Use DENSE_RANK or ROW_NUMBER window function to rank salaries and filter for the required Nth value.",
    "syntax": "SELECT salary FROM (SELECT salary, DENSE_RANK() OVER (ORDER BY salary DESC) as rnk FROM employees) WHERE rnk = N;",
    "difficulty": "placement",
    "tags": ["ranking", "window functions"],
    "category": "interview"
  },
  {
    "id": 73,
    "question": "Write a query to find employees who joined in the same month as today.",
    "answer": "Compare the month of the joining date to the current month.",
    "syntax": "SELECT * FROM employees WHERE TO_CHAR(joining_date, 'MM') = TO_CHAR(SYSDATE, 'MM');",
    "difficulty": "placement",
    "tags": ["date", "filtering"],
    "category": "interview"
  },
  {
    "id": 74,
    "question": "How can you update the salary for all employees in a particular department by 10%?",
    "answer": "Use the UPDATE statement with a WHERE clause for the specific department.",
    "syntax": "UPDATE employees SET salary = salary * 1.10 WHERE department_id = :dept_id;",
    "difficulty": "placement",
    "tags": ["update", "dml"],
    "category": "interview"
  },
  {
    "id": 75,
    "question": "Write a PL/SQL block to calculate the factorial of a number.",
    "answer": "Use a simple loop or recursion in a PL/SQL block.",
    "syntax": "DECLARE n NUMBER := 5; fact NUMBER := 1; BEGIN FOR i IN 1..n LOOP fact := fact * i; END LOOP; DBMS_OUTPUT.PUT_LINE('Factorial: ' || fact); END;",
    "difficulty": "placement",
    "tags": ["plsql", "factorial", "procedural"],
    "category": "interview"
  },
  {
    "id": 76,
    "question": "How do you retrieve records that exist in one table but not in another?",
    "answer": "Use the MINUS operator or a NOT IN subquery.",
    "syntax": "SELECT * FROM table_a MINUS SELECT * FROM table_b;",
    "difficulty": "placement",
    "tags": ["set operation", "minus"],
    "category": "interview"
  },
  {
    "id": 77,
    "question": "Write a query to get the department-wise average salary, only for departments with average salary above 50000.",
    "answer": "Use GROUP BY and HAVING clauses along with AVG aggregation.",
    "syntax": "SELECT department_id, AVG(salary) as avg_salary FROM employees GROUP BY department_id HAVING AVG(salary) > 50000;",
    "difficulty": "placement",
    "tags": ["aggregation", "having"],
    "category": "interview"
  },
  {
    "id": 78,
    "question": "How do you swap the values of two columns in a single UPDATE query?",
    "answer": "Use a single UPDATE with assignment and a temporary variable if necessary.",
    "syntax": "UPDATE table_name SET column1 = column2, column2 = column1;",
    "difficulty": "placement",
    "tags": ["update", "column swap"],
    "category": "interview"
  },
  {
    "id": 79,
    "question": "Write a query to list employees who earn more than their manager.",
    "answer": "Join the employee table to itself and compare employee and manager salaries.",
    "syntax": "SELECT e1.name FROM employees e1 JOIN employees e2 ON e1.manager_id = e2.employee_id WHERE e1.salary > e2.salary;",
    "difficulty": "placement",
    "tags": ["self join", "comparison"],
    "category": "interview"
  },
  {
    "id": 80,
    "question": "How would you count the total number of orders per month from an orders table?",
    "answer": "Group by the extracted month and year from the order date.",
    "syntax": "SELECT EXTRACT(YEAR FROM order_date) as year, EXTRACT(MONTH FROM order_date) as month, COUNT(*) as total_orders FROM orders GROUP BY EXTRACT(YEAR FROM order_date), EXTRACT(MONTH FROM order_date);",
    "difficulty": "placement",
    "tags": ["group by", "aggregation", "date"],
    "category": "interview"
  }
]
